package datastructuresproject3;

import java.util.HashSet;
import java.util.Set;
import java.io.IOException;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

/**
 * @param <T>
 * @file Movies.java
 * @description A program that get recommendations according to the target user and movies.
 * @assignment Data Structures Project 3: Movie Recommendation
 * @date 26.05.2023
 * @authors Beyza Yıldızlı @beyzayildizli10@gmail.com & Merve Öğ @merve.og@stu.fsm.edu.tr
 */
public class Movies<T extends Comparable> extends javax.swing.JFrame {
    
    int userNum = 0;
    int movieNum = 0;
    
    String targetFile = "src/datastructuresproject3/target_user.csv";
    String rateFile = "src/datastructuresproject3/main_data.csv";
    
    GenericCast g = new GenericCast();
    Operations h = new Operations();
    FileOperations<T> fl = new FileOperations<>();
    
    int columnNumber = fl.columnNumber(targetFile);
    
    Integer[][] targetUserMatrix = fl.targetUserMatrix();
    Integer[][] rateMatrix = fl.rateMatrix();
    String[][] movieMatrix = fl.movieMatrix();
    
    String[][] selected10Movie = choose10Movie(movieMatrix);

    /**
     * Creates new form Movies
     */
    public Movies() {
        initComponents();
        populateComboBoxs();
        warningText.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSpinner6 = new javax.swing.JSpinner();
        jPanel1 = new javax.swing.JPanel();
        comboBox1 = new javax.swing.JComboBox<>();
        comboBox2 = new javax.swing.JComboBox<>();
        comboBox3 = new javax.swing.JComboBox<>();
        comboBox4 = new javax.swing.JComboBox<>();
        comboBox5 = new javax.swing.JComboBox<>();
        spinner1 = new javax.swing.JSpinner();
        spinner2 = new javax.swing.JSpinner();
        spinner3 = new javax.swing.JSpinner();
        spinner4 = new javax.swing.JSpinner();
        spinner5 = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        userNumSpinner = new javax.swing.JSpinner();
        movieSpinner = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        recommendButton = new datastructuresproject3.MyButton();
        warningText = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        list = new javax.swing.JList<>();
        backButton = new datastructuresproject3.MyButton();

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel2.setText("similar users:");

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel3.setText("highest rated movies:");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jPanel1.setBackground(new java.awt.Color(184, 212, 213));
        jPanel1.setMinimumSize(new java.awt.Dimension(564, 384));

        spinner1.setModel(new javax.swing.SpinnerNumberModel(0, 0, 5, 1));

        spinner2.setModel(new javax.swing.SpinnerNumberModel(0, 0, 5, 1));

        spinner3.setModel(new javax.swing.SpinnerNumberModel(0, 0, 5, 1));

        spinner4.setModel(new javax.swing.SpinnerNumberModel(0, 0, 5, 1));

        spinner5.setModel(new javax.swing.SpinnerNumberModel(0, 0, 5, 1));

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel4.setText("similar users:");

        jLabel5.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel5.setText("highest rated movies:");

        userNumSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        userNumSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                userNumSpinnerStateChanged(evt);
            }
        });

        movieSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        movieSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                movieSpinnerStateChanged(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel6.setText("Choose Movies");

        jLabel7.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel7.setText("RECOMMENDATIONS:");

        jLabel8.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel8.setText("Point:");

        recommendButton.setText("GET RECOMMENDATIONS");
        recommendButton.setRadius(45);
        recommendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recommendButtonActionPerformed(evt);
            }
        });

        warningText.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        warningText.setForeground(new java.awt.Color(153, 0, 0));
        warningText.setText("SEÇTİĞİNİZ 5 FİLM DE FARKLI OLMALI");

        jScrollPane1.setViewportView(list);

        backButton.setText("back");
        backButton.setRadius(16);
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(comboBox1, 0, 128, Short.MAX_VALUE)
                            .addComponent(comboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comboBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comboBox4, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comboBox5, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(spinner3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(spinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(spinner4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(spinner5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(spinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(jLabel8)
                                .addGap(58, 58, 58))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(recommendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(warningText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(movieSpinner)
                            .addComponent(userNumSpinner)))
                    .addComponent(jLabel7)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(userNumSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(movieSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinner3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinner4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinner5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(recommendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(warningText, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*It randomly selects 10 movies from movie matrix and adds them to a new array with their ids.*/
    public String[][] choose10Movie(String[][] movieMatrix) {
        String[][] selected10MovieMatrix = new String[10][2];
        Random random = new Random();
        Set<Integer> selectedRows = new HashSet<>();
        for (int i = 0; i < 10; i++) {
            int randomRowIndex = random.nextInt(movieMatrix.length);
            if (!selectedRows.contains(randomRowIndex)) {
                selectedRows.add(randomRowIndex);
                selected10MovieMatrix[i][0] = movieMatrix[randomRowIndex][0];
                selected10MovieMatrix[i][1] = movieMatrix[randomRowIndex][1];
            }
        }
        return selected10MovieMatrix;
    }

    /*Adds the names of 10 randomly selected movies to the comboBoxes.*/
    public void populateComboBoxs() {
        for (int i = 0; i < selected10Movie.length; i++) {
            comboBox1.addItem(selected10Movie[i][1]);
            comboBox2.addItem(selected10Movie[i][1]);
            comboBox3.addItem(selected10Movie[i][1]);
            comboBox4.addItem(selected10Movie[i][1]);
            comboBox5.addItem(selected10Movie[i][1]);
        }
    }
    
    /*It traverses the 2d array named Matrix and returns the id in this line 
    if there is the same expression as the entered movie name by converting it to int.*/
    public int findID(String[][] matrix, String movie) {
        for (String[] row : matrix) {
            if (row.length >= 2 && row[1].equals(movie)) {
                try {
                    return Integer.parseInt(row[0]);
                } catch (NumberFormatException e) {
                    System.out.print("ERROR İN findID");
                }
            }
        }
        return -1;
    }

    /*Creates a new score array based on movie scores given in comboBoxes.*/
    public Integer[] newRateList() {
        Integer[] movies = new Integer[columnNumber - 1];
        for (int i = 0; i < movies.length; i++) {
            movies[i] = 0;
        }//findID(selected10Movie, comboBox1.)
        movies[findID(selected10Movie, comboBox1.getSelectedItem().toString())] = (Integer) spinner1.getValue();
        movies[findID(selected10Movie, comboBox2.getSelectedItem().toString())] = (Integer) spinner2.getValue();
        movies[findID(selected10Movie, comboBox3.getSelectedItem().toString())] = (Integer) spinner3.getValue();
        movies[findID(selected10Movie, comboBox4.getSelectedItem().toString())] = (Integer) spinner4.getValue();
        movies[findID(selected10Movie, comboBox5.getSelectedItem().toString())] = (Integer) spinner5.getValue();
        return movies;
    }

    /*Adds id to the beginning of the given movie rate array. Then a new matrix is returned by adding this new array below the targetMatrix.*/
    public static Integer[][] newTargetMatrix(Integer id, Integer[] newMovieRate, Integer[][] targetMatrix) {
        Integer[] newLineWithId = new Integer[newMovieRate.length + 1];
        newLineWithId[0] = id;
        System.arraycopy(newMovieRate, 0, newLineWithId, 1, newMovieRate.length);
        
        int m = targetMatrix.length;
        int n = targetMatrix[0].length;
        
        Integer[][] new2DMatrix = new Integer[m + 1][n];
        
        for (int i = 0; i < m; i++) {
            new2DMatrix[i] = targetMatrix[i];
        }
        new2DMatrix[m] = newLineWithId;
        return new2DMatrix;
    }

    /*It creates a new targetMatrix with the matrix with the given movie scores 
    and creates a heap by taking advantage of the cos similarity between this matrix and the mainMatrix. 
    It takes the desired number of max users from the resulting heap and adds the desired number of movies to a list according to these users.
    Finally, jList prints this list.*/
    private void recomment(Integer[] movieRate) {
        Integer selectedId = 611;
        Integer[][] newTargetMatrix = newTargetMatrix(selectedId, movieRate, targetUserMatrix);
        CosMaxHeap<Integer> m = new CosMaxHeap(fl.rowNumber(rateFile) - 1);
        userNum = (int) userNumSpinner.getValue();
        movieNum = (int) movieSpinner.getValue();
        
        try {
            fl.fillHeapWithUserId(selectedId, m, newTargetMatrix);
        } catch (IOException ex) {
            Logger.getLogger(TargetUser.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        T[] closeUsers = (T[]) h.closeUsers(userNum, m, selectedId, newTargetMatrix);
        
        DefaultListModel<String> liste = new DefaultListModel<>();
        list.setModel(liste);
        
        for (int i = 0; i < closeUsers.length; i++) {
            List<Integer> bestMovies = h.bestMovies(fl.matrixToArray(rateMatrix, (Integer) closeUsers[i]), movieNum);
            List<String> movies = h.movieNamesArray(bestMovies);
            for (int j = 0; j < movieNum; j++) {
                liste.addElement("" + movies.get(j));
            }
        }
    }

    /*Checks whether the same elements exist in the given integer array. Returns false if the same element exists*/
    public static boolean checkSameElements(int[] numbers) {
        Set<Integer> set = new HashSet<>();
        for (int num : numbers) {
            if (set.contains(num)) {
                return false;
            }
            set.add(num);
        }
        return true;
    }

    /*Collects selected movie ids in comboBoxes into an array. If the same movie is selected, it gives a warning.
    If all 5 movies are different, it recommends movies based on the new movie matrix created with newRateList().*/
    private void recommendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recommendButtonActionPerformed
        int[] selectedMovies = {comboBox1.getSelectedIndex(), comboBox2.getSelectedIndex(), comboBox3.getSelectedIndex(), comboBox4.getSelectedIndex(), comboBox5.getSelectedIndex()};
        if (checkSameElements(selectedMovies)) {
            warningText.setVisible(false);
            Integer[] movieRate = newRateList();
            recomment(movieRate);
        } else {
            warningText.setVisible(true);
            warningText.setText("Movies that you choose must be different from each other!");
        }
    }//GEN-LAST:event_recommendButtonActionPerformed

    /*When the value in userNumSpinne changes, it makes the new value of userNum variable the value in spinner.*/
    private void userNumSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_userNumSpinnerStateChanged
        userNum = (int) userNumSpinner.getValue();
    }//GEN-LAST:event_userNumSpinnerStateChanged

    /*When the value in movieSpinner changes, it changes the new value of movieNum to the value in the spinner.*/
    private void movieSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_movieSpinnerStateChanged
        movieNum = (int) movieSpinner.getValue();
    }//GEN-LAST:event_movieSpinnerStateChanged

    /*Returns to the page named FirstPage.*/
    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        FirstPage f = new FirstPage();
        f.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private datastructuresproject3.MyButton backButton;
    private javax.swing.JComboBox<String> comboBox1;
    private javax.swing.JComboBox<String> comboBox2;
    private javax.swing.JComboBox<String> comboBox3;
    private javax.swing.JComboBox<String> comboBox4;
    private javax.swing.JComboBox<String> comboBox5;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner6;
    private javax.swing.JList<String> list;
    private javax.swing.JSpinner movieSpinner;
    private datastructuresproject3.MyButton recommendButton;
    private javax.swing.JSpinner spinner1;
    private javax.swing.JSpinner spinner2;
    private javax.swing.JSpinner spinner3;
    private javax.swing.JSpinner spinner4;
    private javax.swing.JSpinner spinner5;
    private javax.swing.JSpinner userNumSpinner;
    private javax.swing.JLabel warningText;
    // End of variables declaration//GEN-END:variables
}
